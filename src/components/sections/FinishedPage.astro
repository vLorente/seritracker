---
import EmptyResponse from "@components/EmptyResponse.astro"
import Section from "@components/Section.astro"
import Card from "@components/ui/Card"
import type { AnimeData } from "@interfaces/animeResponse"
import { Finished as FinishedDB, db, eq } from "astro:db"

interface FinishedInterface {
	userId: number
	malId: number
	malItem: AnimeData
}

interface LoaderData {
	finishedList: FinishedInterface[]
	emptyText: string
}

const loader = async (): Promise<LoaderData> => {
	const emptyText = "üôÅ A√∫n no tienes series en tu lista de finalizadas"
	const finishedList: FinishedInterface[] | null = (await db
		.select()
		.from(FinishedDB)
		.where(eq(FinishedDB.userId, 1))) as FinishedInterface[] | null

	return { finishedList, emptyText } as LoaderData
}

const { finishedList, emptyText } = await loader()
---

<Section>
	{
		finishedList.length > 0 ? (
			finishedList.map(({ malItem }) => (
				<Card
					title={malItem?.title}
					description={malItem?.synopsis}
					image={malItem?.images.webp.large_image_url}
				/>
			))
		) : (
			<EmptyResponse text={emptyText} />
		)
	}
</Section>
