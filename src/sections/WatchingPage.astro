---
import EmptyResponse from "@components/EmptyResponse.astro"
import Grid from "@components/Grid.astro"
import Row from "@components/Row.astro"
import Section from "@components/Section.astro"
import type { AnimeData } from "@interfaces/animeResponse"
import { Watching as WatchingDB, db, eq } from "astro:db"

interface WatchingInterface {
	userId: number
	malId: number
	malItem: AnimeData
}

interface LoaderData {
	watchingList: WatchingInterface[]
	emptyText: {
		title: string
		text: string
	}
}

const loader = async (): Promise<LoaderData> => {
	const emptyText = {
		title: "Ops!",
		text: "üôÅ A√∫n no tienes series en tu lista de seguimiento",
	}
	const watchingList: WatchingInterface[] | null = (await db
		.select()
		.from(WatchingDB)
		.where(eq(WatchingDB.userId, 1))) as WatchingInterface[] | null

	return { watchingList, emptyText } as LoaderData
}

const { watchingList, emptyText } = await loader()
const buttonText = "FINALIZAR"
---

<Section title="Viendo">
	<Grid>
		{
			watchingList.length > 0 &&
				watchingList.map(({ malItem }) => (
					<Row
						title={malItem.title}
						text={malItem.synopsis}
						image={malItem.images.webp.image_url}
						buttonText={buttonText}
					/>
				))
		}
	</Grid>

	{
		watchingList.length === 0 && (
			<EmptyResponse title={emptyText.title} text={emptyText.text} />
		)
	}
</Section>
